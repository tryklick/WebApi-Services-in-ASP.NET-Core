// <auto-generated />
using System;
using DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DbContext.Migrations.SqlServerDbContext
{
    [DbContext(typeof(csMainDbContext.SqlServerDbContext))]
    [Migration("20231004135155_initial_migration")]
    partial class initial_migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CommentSightseeing", b =>
                {
                    b.Property<Guid>("CommentsCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SightseeingsSightseeingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommentsCommentId", "SightseeingsSightseeingId");

                    b.HasIndex("SightseeingsSightseeingId");

                    b.ToTable("CommentSightseeing");
                });

            modelBuilder.Entity("CommentUser", b =>
                {
                    b.Property<Guid>("CommentsCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommentsCommentId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("CommentUser");
                });

            modelBuilder.Entity("DbModels.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DbModels.Destination", b =>
                {
                    b.Property<Guid>("DestinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("DestinationId");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("DbModels.Sightseeing", b =>
                {
                    b.Property<Guid>("SightseeingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("DestinationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.Property<string>("Sightnames")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("SightseeingId");

                    b.HasIndex("DestinationId");

                    b.ToTable("Sightseeings");
                });

            modelBuilder.Entity("DbModels.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CommentSightseeing", b =>
                {
                    b.HasOne("DbModels.Comment", null)
                        .WithMany()
                        .HasForeignKey("CommentsCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbModels.Sightseeing", null)
                        .WithMany()
                        .HasForeignKey("SightseeingsSightseeingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommentUser", b =>
                {
                    b.HasOne("DbModels.Comment", null)
                        .WithMany()
                        .HasForeignKey("CommentsCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbModels.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbModels.Sightseeing", b =>
                {
                    b.HasOne("DbModels.Destination", "Destinations")
                        .WithMany("Sightseeings")
                        .HasForeignKey("DestinationId");

                    b.Navigation("Destinations");
                });

            modelBuilder.Entity("DbModels.Destination", b =>
                {
                    b.Navigation("Sightseeings");
                });
#pragma warning restore 612, 618
        }
    }
}
